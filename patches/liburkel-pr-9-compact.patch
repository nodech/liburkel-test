diff --git a/liburkel/include/urkel.h b/liburkel/include/urkel.h
index eb674d1..a718c40 100644
--- a/liburkel/include/urkel.h
+++ b/liburkel/include/urkel.h
@@ -117,6 +117,11 @@ urkel_insert(urkel_t *tree,
 URKEL_EXTERN int
 urkel_remove(urkel_t *tree, const unsigned char *key);
 
+URKEL_EXTERN int
+urkel_compact(const char *dst_prefix,
+              const char *src_prefix,
+              const unsigned char *hash);
+
 URKEL_EXTERN int
 urkel_prove(urkel_t *tree,
             unsigned char **proof_raw,
diff --git a/liburkel/src/tree.c b/liburkel/src/tree.c
index f0ec649..87eab95 100644
--- a/liburkel/src/tree.c
+++ b/liburkel/src/tree.c
@@ -476,6 +476,153 @@ urkel_tree_prove(tree_db_t *tree,
   }
 }
 
+static urkel_node_t *
+urkel_tree_compact(tree_db_t *dst, tree_db_t *src, urkel_node_t *node) {
+  switch (node->type) {
+    case URKEL_NODE_NULL: {
+      return node;
+    }
+
+    case URKEL_NODE_INTERNAL: {
+      urkel_internal_t *internal = &node->u.internal;
+      urkel_node_t *left, *right, *out;
+
+      left = urkel_tree_compact(dst, src, internal->left);
+
+      if (left == NULL)
+        return NULL;
+
+      internal->left = left;
+
+      right = urkel_tree_compact(dst, src, internal->right);
+
+      if (right == NULL)
+        return NULL;
+
+      internal->right = right;
+
+      CHECK(node->flags & URKEL_FLAG_WRITTEN);
+      node->flags ^= URKEL_FLAG_WRITTEN;
+
+      urkel_store_write_node(dst->store, node);
+
+      if (urkel_store_needs_flush(dst->store)) {
+        if (!urkel_store_flush(dst->store))
+          return NULL;
+      }
+
+      out = checked_malloc(sizeof(urkel_node_t));
+      urkel_node_hash(node);
+      urkel_node_to_hash(node, out);
+      urkel_node_destroy(node, 1);
+      return out;
+    }
+
+    case URKEL_NODE_LEAF: {
+      urkel_node_t *out;
+      unsigned char value[URKEL_VALUE_SIZE];
+      size_t size;
+
+      if (!urkel_store_retrieve(src->store, node, value, &size))
+        urkel_abort();
+
+      CHECK(node->flags & URKEL_FLAG_WRITTEN);
+      urkel_node_store(node, value, size);
+      node->flags ^= URKEL_FLAG_WRITTEN;
+      node->flags ^= URKEL_FLAG_SAVED;
+
+      urkel_store_write_value(dst->store, node);
+      urkel_store_write_node(dst->store, node);
+
+      if (urkel_store_needs_flush(dst->store)) {
+        if (!urkel_store_flush(dst->store))
+          return NULL;
+      }
+
+      out = checked_malloc(sizeof(urkel_node_t));
+      urkel_node_hash(node);
+      urkel_node_to_hash(node, out);
+      urkel_node_destroy(node, 1);
+
+      return out;
+    }
+
+    case URKEL_NODE_HASH: {
+      urkel_node_t *rn = urkel_store_resolve(src->store, node);
+
+      if (rn == NULL) {
+        urkel_abort();
+        return NULL;
+      }
+
+      urkel_node_destroy(node, 1);
+      return urkel_tree_compact(dst, src, rn);
+    }
+
+    default: {
+      urkel_abort();
+      return NULL;
+    }
+  }
+}
+
+int
+urkel_compact(const char *dst_prefix,
+              const char *src_prefix,
+              const unsigned char *hash) {
+  const unsigned char *root_hash;
+  tree_db_t *dst, *src;
+  urkel_node_t *root = NULL;
+  urkel_node_t *out = NULL;
+  int ret = 1;
+
+  dst = urkel_open(dst_prefix);
+
+  if (dst == NULL)
+    return 0;
+
+  src = urkel_open(src_prefix);
+
+  if (src == NULL) {
+    urkel_close(src);
+    return 0;
+  }
+
+  if (hash == NULL)
+    root_hash = src->hash;
+  else
+    root_hash = hash;
+
+  root = urkel_store_get_history(src->store, root_hash);
+
+  if (root == NULL) {
+    urkel_errno = URKEL_ENOTFOUND;
+    ret = 0;
+    goto fail;
+  }
+
+  out = urkel_tree_compact(dst, src, root);
+
+  if (out == NULL) {
+    urkel_errno = URKEL_EBADWRITE;
+    ret = 0;
+    goto fail;
+  }
+
+  if (!urkel_store_commit(dst->store, out)) {
+    urkel_errno = URKEL_EBADWRITE;
+    ret = 0;
+    goto fail;
+  }
+fail:
+  if (out != NULL)
+    urkel_node_destroy(out, 1);
+
+  urkel_close(dst);
+  urkel_close(src);
+  return ret;
+}
+
 static urkel_node_t *
 urkel_tree_write(tree_db_t *tree, urkel_node_t *node) {
   switch (node->type) {
diff --git a/liburkel/test/test.c b/liburkel/test/test.c
index 5ff9615..86249ce 100644
--- a/liburkel/test/test.c
+++ b/liburkel/test/test.c
@@ -412,6 +412,60 @@ test_urkel_max_value_size(void) {
   ASSERT(urkel_destroy(URKEL_PATH));
 }
 
+static void
+test_urkel_compact(void) {
+  static const size_t PAIRS = 100;
+  size_t i;
+  urkel_t *db;
+  urkel_tx_t *tx;
+  urkel_kv_t *kvs = urkel_kv_generate(PAIRS);
+
+  db = urkel_open(URKEL_PATH);
+
+  ASSERT(db != NULL);
+
+  for (i = 0; i < PAIRS; i++) {
+    unsigned char *key = kvs[i].key;
+    unsigned char *value = kvs[i].value;
+    tx = urkel_tx_create(db, NULL);
+
+    ASSERT(tx != NULL);
+    ASSERT(urkel_tx_insert(tx, key, value, 64));
+    ASSERT(urkel_tx_has(tx, key));
+
+    ASSERT(urkel_tx_commit(tx));
+    urkel_tx_destroy(tx);
+  }
+
+  urkel_close(db);
+  ASSERT(urkel_compact(URKEL_TMP_PATH, URKEL_PATH, NULL));
+
+  db = urkel_open(URKEL_TMP_PATH);
+  ASSERT(db != NULL);
+
+  tx = urkel_tx_create(db, NULL);
+  ASSERT(tx != NULL);
+
+  for (i = 0; i < PAIRS; i++) {
+    unsigned char *key = kvs[i].key;
+    unsigned char *value = kvs[i].value;
+    unsigned char result[64];
+    size_t result_len;
+
+    ASSERT(urkel_tx_has(tx, key));
+    ASSERT(urkel_tx_get(tx, result, &result_len, key));
+    ASSERT(result_len == 64);
+    ASSERT(urkel_memcmp(result, value, 64) == 0);
+  }
+
+  urkel_tx_destroy(tx);
+  urkel_close(db);
+  urkel_kv_free(kvs);
+
+  ASSERT(urkel_destroy(URKEL_PATH));
+  ASSERT(urkel_destroy(URKEL_TMP_PATH));
+}
+
 int
 main(void) {
   test_memcmp();
@@ -419,5 +473,6 @@ main(void) {
   test_urkel_node_replacement();
   test_urkel_leaky_inject();
   test_urkel_max_value_size();
+  test_urkel_compact();
   return 0;
 }
diff --git a/liburkel/test/utils.h b/liburkel/test/utils.h
index 75b2144..45f63db 100644
--- a/liburkel/test/utils.h
+++ b/liburkel/test/utils.h
@@ -19,6 +19,7 @@
 #define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
 
 #define URKEL_PATH "./urkel_db_test"
+#define URKEL_TMP_PATH "./urkel_db_tmp_test"
 
 #if defined(__GNUC__) && !defined(__clang__) && !defined(__INTEL_COMPILER)
 /* Avoid a GCC bug: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95189 */
